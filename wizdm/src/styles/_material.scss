@use "~@angular/material/core/theming/palette" as mat-palette;
@use "~@angular/material/badge/badge-theme" as mat-badge;
@use "sass:map";
@use "sass:math";
/*
// Creates a customized material typography first...
$wm-typography: mat-typography-config(
  $font-family:   $wm-font-family,
  $headline:      mat-typography-level(32px, 48px, 700),
  $title:         mat-typography-level(24px, 32px, 600),
  $subheading-2:  mat-typography-level(20px, 28px, 600),
  $subheading-1:  mat-typography-level(18px, 24px, 600),
  $body-2:        mat-typography-level(18px, 24px, 500),
  $body-1:        mat-typography-level(16px, 20px, 500),
  $button:        mat-typography-level(16px, 20px, 500)
);

//.. than extends with some application specific values
$wm-typography: extend-typography($wm-typography, 
  (
    logo:         mat-typography-level(22px, 24px, 600),
    social:       mat-typography-level(22px, 24px, 600),
    //footnote:   mat-typography-level(16px, 20px, 400),
    //toc:        mat-typography-level(18px, 24px, 500)
  ) 
);
*/

@function extend-typography($mat-config, $extension) {

  // Gets the general font family
  $font-family: map.get($mat-config, font-family);

  // Loop through the extension levels and set the `font-family` of the ones that don't have one.
  // Since Sass can't modify maps in place we need to merge and re-assign.
  @each $key, $level in $extension {
    @if map.get($level, font-family) == null {
      $new-level: map.merge($level, (font-family: $font-family));
      $extension: map.merge($extension, ($key: $new-level));
    }
  }

  // Returns the extended typography
  @return map.merge($mat-config, $extension);
}

/*
// Defines the main theme colors palettes.
$wm-primary: mat-palette($mat-blue);
$wm-accent:  mat-palette($mat-indigo, A200, A100, A400);
$wm-warn:    mat-palette($mat-red);

// Creates a standard material light theme first...
$wm-theme: mat-light-theme($wm-primary, $wm-accent, $wm-warn);

//... than overrides with customized fore/background values
$wm-theme: extend-theme($wm-theme, 

  $foreground: (
    // Overwrites some Angular Material standard values
    base:              mat-color($wm-primary, 900),
    disabled-button:   rgba(mat-color($wm-primary, 900), 0.26),
    icon:              mat-color($wm-primary),
    icons:             mat-color($wm-primary),
    text:              rgba(mat-color($wm-primary, 900), 0.87),
    slider-min:        rgba(mat-color($wm-primary, 900), 0.87),
    slider-off:        rgba(mat-color($wm-primary, 900), 0.26),
    slider-off-active: rgba(mat-color($wm-primary, 900), 0.38),

    // Adds extra application specific foreground extension
    contrast:          white,
    edit-box:          rgba(white, 0.8)
  ),

  $background: (
    // Overwrites some Angular Material standard values
    status-bar:       white,
    app-bar:          white,
    background:       white,

    // Appends extra application specific background extensions
    edit-box:         rgba(mat-color($mat-blue, 900), 0.8)
  )
);
*/

// Overrides standard theme foreground and background values with customized ones
@function tweak-theme($theme, $foreground: (), $background: ()) {
  
  // Gets the standard material maps of fore/background
  $fore: map.get($theme, foreground);
  $back: map.get($theme, background);

  // Merges the standard values with the override
  $result: map.merge($theme, (
    foreground: map.merge($fore, $foreground),
    background: map.merge($back, $background)
  ));
  
  // Overrides the default contrast values to reflect the new foreground
  @return map.merge($result, tweak-contrast($result));
}

// Overrides standard theme palette contrasts with customized values
@function tweak-contrast($theme) {

  // Picks the light/dark text overrides from the extended foreground 
  $fore: map.get($theme, foreground);
  $dark: map.get($fore, dark-text);
  $light: map.get($fore, light-text);

  // Loops on the three palettes
  @each $pal in ('primary', 'accent', 'warn') {

    $palette: map.get($theme, $pal);

    // Loops on the three color contrasts
    @each $cnt in ('default', 'lighter', 'darker') {

      $contrast: map.get($palette, #{$cnt}-contrast);

      // Overrides $dark-primary-text values
      @if $dark and $contrast == mat-palette.$dark-primary-text {
        $palette: map.merge($palette, (#{$cnt}-contrast: $dark));
        $theme: map.merge($theme, (#{$pal}: $palette ));
      }

      // Overrides $light-primary-text values
      @if $light and $contrast == mat-palette.$light-primary-text {
        $palette: map.merge($palette, (#{$cnt}-contrast: $light));
        $theme: map.merge($theme, (#{$pal}: $palette ));
      }
    }
  }

  @return $theme;
}

@mixin tweak-typo-margins(
  $display-4:    24,
  $display-3:    24,
  $display-2:    24,
  $display-1:    24,
  $headline:     16,
  $title:        16,
  $subheading-2: 16,
  $subheading-1: 16,
  $body:         12
) { 

  .mat-h1, .mat-headline, .mat-typography h1 { margin: 0 0 #{$headline}px; }
  .mat-h2, .mat-title, .mat-typography h2 { margin: 0 0 #{$title}px; }
  .mat-h3, .mat-subheading-2, .mat-typography h3 { margin: 0 0 #{$subheading-2}px; }
  .mat-h4, .mat-subheading-1, .mat-typography h4 { margin: 0 0 #{$subheading-1}px; }
  .mat-h5, .mat-typography h5 { margin: 0 0 #{$body}px; }
  .mat-h6, .mat-typography h6 { margin: 0 0 #{$body}px; }
  .mat-body, .mat-body-1, .mat-typography { p { margin: 0 0 #{$body}px; }}
  .mat-display-4, .mat-typography .mat-display-4 { margin: 0 0 #{$display-4}px; }
  .mat-display-3, .mat-typography .mat-display-3 { margin: 0 0 #{$display-3}px; }
  .mat-display-2, .mat-typography .mat-display-2 { margin: 0 0 #{$display-2}px; }
  .mat-display-1, .mat-typography .mat-display-1 { margin: 0 0 #{$display-1}px; }
}

// Tweaks the mat-badge to better accomodate long texts
@mixin tweak-mat-badge-size($size) {
  .mat-badge-content {
    min-width: $size;
    width: auto;
    padding: 0 4px;
    border-radius: math.div($size, 2);
    box-sizing: border-box;
  }
}

@mixin tweak-components() {

  // Minifies the menu on request
  .mat-menu-panel.mini { min-width: unset !important; min-height: unset !important; }  

  // Removes the fixed height of list items
  .mat-list-item.height-unset { height: unset !important; }

  // Resets the padding for menu, dialog, expansion panel...
  .mat-menu-panel.padding-0 .mat-menu-content,
  .mat-dialog.padding-0 .mat-dialog-container,
  .mat-expansion-panel.padding-0 .mat-expansion-panel-body { 
    padding: 0;
  }

  // Adds center alignement for material table
  .mat-header-cell.center { 
    text-align: center; 
    .mat-sort-header-container { justify-content: center; } 
  }
  .mat-cell.center { text-align: center; }

  // Fix the mat-badge to better accomodate long texts
  .mat-badge-small { @include tweak-mat-badge-size(mat-badge.$small-size); }
  .mat-badge-medium { @include tweak-mat-badge-size(mat-badge.$default-size); }
  .mat-badge-large { @include tweak-mat-badge-size(mat-badge.$large-size); }
}

